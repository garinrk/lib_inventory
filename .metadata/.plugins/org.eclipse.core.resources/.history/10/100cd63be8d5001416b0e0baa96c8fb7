package garinrphase2;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.*;
import java.text.*;
/**
 * CS 5530 Database Systems
 * Phase 2 Code [Bookshelf.java]
 * 
 * Part of the Spring 2015 semester long project. Bookshelf contains
 * much of the functionality needed for the inventory to correctly operate.
 * 
 * @author Garin Richards, u0738045
 *
 */
public class Bookshelf {
	
	static boolean verbose = true;
	
	//TODO: Check ISBN Legality, ISBNs are Strings. Too large for ints.
	
//	private static String DBUSER = "cs5530u18";
//	private static String DBPASS = "f96qb5pr";
//	private static String DBURL = "Jdbc:mysql://georgia.eng.utah.edu/cs5530db18";
//	
	/* Used for user input and input parsing */
	static Scanner in = new Scanner(System.in);
	static int choice = 0;
	static String userSelection = null;
	
	/* Credentials belonging to newly created username */
	public static String newUsername;
	static String newID;
	static String newFullName;
	static String newAddress;
	static String newPhoneNumber;
	static String newEmail;
	
	/* Represents the currently logged in user using the library */
	static String loggedInUser = null;
	
	/* Used for calculating dates */
	static Calendar c = Calendar.getInstance();
	

	/**
	 * Adds a new user to the library database. Queries the user
	 * for a unique username and id, full name, address, phone number, and email address
	 */
	public static void AddUser()
	{
		
		//TODO: Check for if user already exists in table
		

		
		System.out.println("Adding a new user: ");
		System.out.print("New Unique Username: ");
		newUsername = in.nextLine();
		
		//TODO: This should return whether or not said username already exists in table
		while(!CheckForUser(newUsername))
		{
			System.out.print(newUsername + " already exists, please choose a new username: ");
			newUsername = in.nextLine();
		}
		
		/* User must enter a number for an ID */
		System.out.print("New ID (Number): ");
		do
		{
			newID = in.nextLine();
			
			if(!Main.IsInteger(newID))
			{
				System.out.print(newID + " is not a number, ");
				System.out.print("Please enter a number for this user's ID: ");
			}
			else
			{
				break;
			}
		} while (true);
		
		System.out.print("New User's Full Name: ");
		newFullName = in.nextLine();
		System.out.print("New User's Home Address: ");
		newAddress = in.nextLine();
		System.out.print("New User's Email Address: ");
		newEmail = in.nextLine();
		System.out.print("New User's Phone Number: ");
		
		/* User must enter a number for a phone number */
		do
		{
			newPhoneNumber = in.nextLine();
			
			if(!Main.IsInteger(newID))
			{
				System.out.print(newPhoneNumber + " is not a number, ");
				System.out.print("Please enter a number for this user's Phone Number: ");
			}
			else
			{
				break;
			}
		} while (true);
		System.out.println();
		
		if(verbose)
		{
			System.out.println("New User Info: ");
			System.out.println("Full Name: " + newFullName);
			System.out.println("Username: " + newUsername);
			System.out.println("ID: " + newID);
			System.out.println("Address: " + newAddress);
			System.out.println("Email: " + newEmail);
			System.out.println("Phone Number: " + newPhoneNumber);	
		}
		
		//TODO: Construct query from provided information, send to server
		//TODO: If successful, return success and throw user back to main menu
		
		//if there wasn't a previously set user, as in this is a new user being created upon start
		if(loggedInUser == null)
			return;
		else
			Main.MainMenu();
		
//		System.out.print("[1] to exit or [2] to return to main menu");
//		
//		do
//		{
//			userSelection = in.nextLine();
//			if(!Main.IsInteger(userSelection))
//			{
//				System.out.print(userSelection + " is not a number, ");
//				System.out.print("Please enter [1] to return to main menu or [2] to exit: ");
//			}
//			if(Main.IsInteger(userSelection))
//			{
//				choice = Integer.parseInt(userSelection);
//				if(choice != 1 && choice != 2)
//				{
//					System.out.print(choice + " is not a valid option, ");
//					System.out.print("Please enter [1] to return to main menu or [2] to exit: ");
//				}
//				
//				else
//				{
//					break;
//				}
//			}
//		}
//		while (true);

//		if(choice == 1)
//			Main.MainMenu();
//		else
//			Main.ExitProgram();
		
	}//end of AddUser
	
	public static void Login(String username)
	{
		//TODO: test to see if said user exists in database, only then can you set the loggedinuser to be the given username
		loggedInUser = username;
	}

	/**
	 * Sends a sql statement to the database on the given connection
	 * @param query, string composed of constructed sql query
	 * @param sqlConnection, connection object currently connected to the database defined in main
	 * @return a result set containing results from said query
	 */
	public static ResultSet SendQuery(String query, Connection sqlConnection)
	{
		ResultSet rs = null;
		
		return rs;
	}
	
	/**
	 * Checkout a book from the library
	 * NOTE: MONTH IS ZERO BASED
	 * ISBNs are 13 digits long
	 * Compute the due date to be 30 days from today
	 */
	public static void CheckoutBook(Date today)
	{
		String ISBN;
		System.out.print("Please enter the 13 digit ISBN of the book you wish to check out: ");
		do{
			userSelection = in.nextLine();
			
			if(verbose)
			{
				System.out.println("Length of isbn: " + userSelection.length());
			}
			
			if(/*!Main.IsInteger(userSelection) ||*/ userSelection.length() != 13)
			{
				System.out.print("Not a valid ISBN, please try again: ");
			}
			else
			{
				ISBN = userSelection;
				break;
			}
			
		}while(true);
		
		if(verbose)
		{
			System.out.println("The ISBN to be checked out is: " + ISBN);
		}
		
		//compute due date to be 30 days from today
		c.setTime(today);
		
		if(verbose)
		{
			System.out.println("It is currently " + c.get(Calendar.MONTH) + " the " + c.get(Calendar.DAY_OF_MONTH));
		}

		c.add(Calendar.DATE, 30);
		
		//save duedate
		int futureMonth = c.get(Calendar.MONTH) + 1;
		int futureDay = c.get(Calendar.DAY_OF_MONTH);
		int futureYear = c.get(Calendar.YEAR);
		
//		System.out.println(c.getTime());
		if(verbose)
		{
			System.out.println("30 days from now it will be " + c.get(Calendar.MONTH) + " the " + c.get(Calendar.DAY_OF_MONTH));
		}
		
		//TODO: Construct proper date object for sql query
		
		//TODO: Check if there is a waitlist for the book
		
		//TODO: The user can only check out the book when they have been on said walist the longest.
		
	}//end of CheckoutBook

	/**
	 * The following should be printed:
	 * 
	 * Personal Data of User:
	 * 		name
	 * 		username
	 * 		id
	 * 		address
	 * 		phone number
	 * 		email address
	 * Full book history:
	 * 		All books checked out in the past
	 * 			ISBN
	 * 			Title
	 * 			Dates of checkout and return
	 *	Full list of books lost by user
	 *	Full list of books requested for future checkout (User is currently on waitlist for)
	 *	Full list of review they have written for books
	 *		Score
	 *		Text
	 * 		
	 */
	public static void PrintUserRecord()
	{
		String lookedupUser;
		System.out.println();
		System.out.println("Username to view record of: ");
		lookedupUser = in.nextLine();
		
		if(!CheckForUser(lookedupUser))
		{
			System.out.println("User does not exist, returning to main menu");
			System.out.println();
			Main.MainMenu();
		}
		
		else
		{
			if(verbose)
			{
				System.out.println("Printing record for " + lookedupUser);
			}
			
			//TODO: Holy SQL batman
		}

		
	}
	
	/**
	 * Adds a new record of a book to the library, but not a copy
	 * Prompt user for:
	 * 		ISBN
	 * 		title
	 * 		author
	 * 		publisher
	 * 		year of publication
	 * 		format
	 * 		subject
	 * 		book summary
	 * 
	 * Set the following to null/empty
	 * 		individual book copy location
	 * 		availability
	 */
	public static void AddBookRecord()
	{
		BigInteger newISBN;
		String newTitle;
		String newPublisher;
		String newYearPub;
		String newFormat;
		String newSubject;
		String newSummary;
		
		int numberOfAuthors;
		
		boolean multipleAuthors;
		
		
		System.out.println("Entering new book data...");
		System.out.println();
		
		System.out.println("ISBN: ");
		newISBN = new BigInteger(in.nextLine());
		System.out.print("Title: ");
		newTitle = in.nextLine();
		
		
		System.out.print("How many authors are there for this title? :");
		
		do
		{
			userSelection = in.nextLine();
			
			if(!Main.IsInteger(userSelection))
			{
				System.out.print(userSelection + " is not a number, ");
				System.out.print("Please enter the number of authors: ");
			}
			else
			{
				numberOfAuthors = Integer.parseInt(userSelection);
				break;
			}
		} while (true);
		
		//create an array to hold the names of multiple authors for the title
		String[] authors = new String[numberOfAuthors];
		
		//only one author, grab name and carry on
		if(numberOfAuthors == 1)
		{
			System.out.print("Author: ");
			authors[0] = in.nextLine();
			multipleAuthors = false;
		}
		else
		{			
			//there is more than one author for this title
			multipleAuthors = true;
			
			//add authors to arrays 
			for(int i = 0; i < numberOfAuthors; i++)
			{
				System.out.print("Author #" + i + ": ");
				authors[i] = in.nextLine();
			}
			
			multipleAuthors = true;
		}
		
		
		System.out.print("Publisher: ");
		newPublisher = in.nextLine();
		System.out.print("Year of Publication: ");
		newYearPub = in.nextLine();
		System.out.println("Subject: ");
		newSubject = in.nextLine();
		System.out.println("Format: ");
		newFormat = in.nextLine();
		System.out.println("Book Summary: ");
		newSummary = in.nextLine();
		
		
		/*
		 * Show inputted information back to user to see if they have made a mistake
		 */
		
		System.out.println("Is the following data correct?");
		System.out.println("Title: " + newTitle);
		System.out.println("ISBN: " + newISBN);
		System.out.print("Author(s): ");
		
		for(int i = 0; i < numberOfAuthors; i++)
		{
			if(i == numberOfAuthors - 1)
			{
				System.out.println(authors[i]);
			}
			else
			{
				System.out.print(authors[i]);
			}
		}
		System.out.println("Publisher: " + newPublisher);
		System.out.println("Year of Publication: " + newYearPub);
		System.out.println("Format: " + newFormat);
		System.out.println("Subject: " + newSubject);
		System.out.println("Book Summary: " + newSummary);
		System.out.print("Please answer [1] for yes and [0] for no: ");
		
		try
		{
			do
			{
				userSelection = in.nextLine();
				
				if(!Main.IsInteger(userSelection))
				{
					System.out.print(userSelection + " is an invalid option, ");
					System.out.print("Please make a selection: ");
				}
				
				//if the user did enter a number
				if(Main.IsInteger(userSelection))
				{
					choice = Integer.parseInt((userSelection));
					
					//check to see if it's a valid option
					if(choice != 0 && choice != 1)
					{
						System.out.print(choice + " is an invalid option ");
						System.out.print("please make a selection: ");
						
					}
					
					//case where the user did enter a valid option number
					else
					{
						break;
					}
					
				}
			} while (true);
		}
		catch (Exception e)
		{
			
		}
		
		if(choice == 0)
		{
			//the user has detected an error. restart process
			AddBookRecord();
		}
		
		else
		{
			//the user has entered the correct information
			
			//TODO: Construct SQL Query to add new book record to database.
		}
		
		
		
	}
	
	public static void AddBookCopy()
	{
		String isbntoaddto;
		int newcopies;
		//Specify the isbn and number of copies to add
		System.out.print("ISBN of book to add copies to: ");
		isbntoaddto = in.nextLine();
		System.out.println("How many copies would you like to add? :");
		
		do
		{
			userSelection = in.nextLine();
			
			if(!Main.IsInteger(userSelection))
			{
				System.out.print(userSelection + " is not a number, ");
				System.out.print("Please enter a number for this user's ID: ");
			}
			else
			{
				newcopies = Integer.parseInt(userSelection);
				break;
			}
		} while (true);
		
		//
		
		
		
	}
	
	public static void CheckLateList()
	{
		
	}
	
	public static void LeaveReview()
	{
		
	}
	
	public static void BrowseLibrary()
	{
		
	}
	
	public static void ReturnBook()
	{
		
	}
	
	public static void PrintBookRecord()
	{
		
	}
	
	public static void PrintLibraryStatistics()
	{
		
	}
	
	public static void PrintUserStatistics()
	{
		
	}
	
	public static boolean CheckForUser(String username)
	{
		boolean found = false;
		
		//check to see if the user already exists in the database
	
		return found;
	}
	

}
